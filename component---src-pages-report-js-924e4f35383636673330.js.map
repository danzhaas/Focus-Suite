{"version":3,"sources":["webpack:///./src/pages/report.js"],"names":["sumDurations","array","eventType","validatedTimeline","i","length","num","push","durations","j","eventDuration","reduce","total","ReportPage","Consumer","context","title","className","distractionDuration","timedEvents","taskDuration","style","color","distractionTotal","timeElapsed","Math","floor","timerName","paused","distraction","id","text","large","onClick","toggleTimer","navigate","resetTimer"],"mappings":"4FAAA,gIAWA,SAASA,EAAcC,EAAOC,GAM5B,IADA,IAAIC,EAAmB,GACbC,EAAI,EAAGA,EAAIH,EAAMI,OAAQD,GAAQ,EAAI,CAC3C,IAAIE,EACsBA,EAA1BL,EAAMG,IAAMH,EAAMG,EAAE,GAAYA,EAAYA,EAAE,EAC9CD,EAAkBI,KAAKN,EAAMG,GAAIH,EAAMK,IAQ3C,IAFA,IAAIE,EAAY,GAENC,EADI,UAAdP,EAA0C,EAAwB,EACrCO,EAAMN,EAAkBE,OAAO,EAAII,GAAS,EAAI,CACzE,IAAIC,EAAiBP,EAAmBM,EAAE,GAAMN,EAAkBM,GAClED,EAAUD,KAAKG,GASnB,OALIF,EADqB,IAArBA,EAAUH,OACE,EAEJG,EAAUG,QAAO,SAACC,EAAON,GAAR,OAAiBM,EAAQN,KAiDzCO,UAlCI,WACjB,OACE,kBAAC,IAAUC,SAAX,MACG,SAAAC,GAAO,OACN,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAM,WACX,yBAAKC,UAAU,sBACb,sCACA,kBAAC,IAAD,CAAUC,oBAAqBlB,EAAce,EAAQI,YAAa,gBAAiBC,aAAcpB,EAAce,EAAQI,YAAa,WACpI,wBAAIE,MAAO,CAAEC,MAAM,SAAnB,eAlBiBrB,EAkB6Cc,EAAQI,YAhB5EI,EAAmBvB,EAAaC,EAAO,gBAEvCuB,EAAcD,EADFvB,EAAaC,EAAO,SAE5BwB,KAAKC,MAAOH,EAAiBC,EAAa,MAaxC,wBACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAWG,UAAS,kBAAqBC,QAAM,EAACC,aAAW,IAC3D,kBAAC,IAAD,CAAWF,UAAS,aAAgBC,QAAM,IAC1C,yBAAKE,GAAG,kBACN,kBAAC,SAAD,CAEEC,KAAK,cACLC,OAAK,EACLC,QAAS,WAAQlB,EAAQmB,cAAeC,mBAAS,cAEnD,kBAAC,SAAD,CAEEJ,KAAK,WACLC,OAAK,EACLC,QAAS,WAAQlB,EAAQqB,aAAcD,mBAAS,WAjChE,IAA6BlC,EAEvBsB,EAEAC","file":"component---src-pages-report-js-924e4f35383636673330.js","sourcesContent":["import React from \"react\"\r\nimport { Button } from \"@blueprintjs/core\"\r\nimport { myContext } from '../components/provider'\r\nimport { navigate } from \"gatsby\"\r\nimport Layout from \"../components/layout\"\r\nimport TimerFace from \"../components/timerFace\"\r\nimport PieChart from \"../components/pieChart\"\r\nimport Timeline from \"../components/timeline\"\r\nimport SEO from \"../components/seo\"\r\n\r\n\r\nfunction sumDurations (array, eventType) {\r\n// sumDurations returns total duration of the distraction or task events for the pie chart. \r\n\r\n  // first validate timeline for inconsistent time reporting; assures chronological order.\r\n  // When distraction n start time is before distraction n-1 end time, reset the latter distraction begin time to equal former distraction end time.  If i > i+1, set i+1 = i \r\n  var validatedTimeline =[];  \r\n  for ( var i = 0; i < array.length; i = i + 2 ) {\r\n      var num;\r\n      array[i] >= array[i+1] ? (num = i) : (num = i+1);\r\n      validatedTimeline.push(array[i], array[num]);\r\n  }\r\n  \r\n  // pick appropriate indexes of event times to return total duration of either task or distraction events.\r\n  // Task event start and end indexes are (even, odd), and distraction event start and end indexes are (odd, even)\r\n  var startingIndex;\r\n  var durations = [];\r\n  eventType === \"tasks\" ? ( startingIndex = 0 ) : ( startingIndex = 1 );\r\n  for ( var j = startingIndex; j < ( validatedTimeline.length-1); j = (j + 2)) {\r\n      var eventDuration = (validatedTimeline[(j+1)] - validatedTimeline[j]);\r\n      durations.push(eventDuration);\r\n  };\r\n  // reduce all durations of the specified event type\r\n  if (durations.length === 0) {\r\n      durations = 0;\r\n  } else {\r\n  durations = durations.reduce((total, num) => (total + num));\r\n  }\r\n  //returns total duration of specified event type\r\n  return durations\r\n}\r\n\r\nfunction distractionPercent (array) {\r\n// distractionPercent returns the percent of total time that was distracted\r\n  var distractionTotal = sumDurations(array, \"distractions\");\r\n  var taskTotal = sumDurations(array, \"tasks\");\r\n  var timeElapsed = distractionTotal + taskTotal;\r\n  return (Math.floor((distractionTotal/timeElapsed)*100))\r\n}\r\n\r\n\r\nconst ReportPage = () => {\r\n  return (\r\n    <myContext.Consumer>\r\n      {context => (\r\n        <Layout>\r\n          <SEO title=\"Report\" />\r\n          <div className=\"report-page-layout\" >\r\n            <h2>Report</h2>\r\n            <PieChart distractionDuration={sumDurations (context.timedEvents, \"distractions\")} taskDuration={sumDurations (context.timedEvents, \"tasks\")} />\r\n            <h4 style={{ color: `blue` }} >Distracted {distractionPercent(context.timedEvents)}% of total task time</h4>\r\n            <Timeline />\r\n            <TimerFace timerName={`Distracted Time`} paused distraction />\r\n            <TimerFace timerName={`Total Time`} paused />\r\n            <div id=\"report-buttons\">\r\n              <Button\r\n                // className=\"w50\"\r\n                text=\"Resume Task\"\r\n                large\r\n                onClick={() => { context.toggleTimer(); navigate(\"/timer/\") }}\r\n              />\r\n              <Button\r\n                // className=\"w50\"\r\n                text=\"New Task\"\r\n                large\r\n                onClick={() => { context.resetTimer(); navigate(\"/\") }}\r\n              />\r\n            </div>\r\n          </div>\r\n        </Layout>\r\n      )}\r\n    </myContext.Consumer>\r\n  )\r\n}\r\n\r\nexport default ReportPage\r\n"],"sourceRoot":""}