{"version":3,"sources":["webpack:///./src/components/timerFace.js","webpack:///./src/pages/timer.js"],"names":["TimerFace","props","timerName","distraction","paused","useState","addASecond","useEffect","id","setInterval","Date","now","clearInterval","Consumer","context","className","array","timeElapsed","formatDoubleDigits","value","eventType","adjustedTimeline","i","length","num","push","durations","eventDuration","reduce","total","sumDurations","hoursPassed","Math","floor","hour","min","minutesPassed","sec","secondsPassed","formatTime","timedEvents","CustomTimePanel","customDuration","logDistraction","style","display","flexDirection","width","placeholder","onClick","document","getElementById","DistractedButtonPanel","large","TimePanel","toggleTimer","timerDisplayed","toggleTimerDisplayed","marginLeft","text","padding","textAlign","navigate","TimerPage","title"],"mappings":"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","file":"component---src-pages-timer-js-0c140c92ae4089ec680e.js","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nimport { myContext } from '../components/provider'\r\n\r\n\r\n// function sumDurations(eventArray, eventType) {\r\n//   var startIndex;\r\n//   var durations = [];\r\n//   eventType === \"tasks\" ? (startIndex = 0) : (startIndex = 1);\r\n//   for (var i = startIndex; i < (eventArray.length - 1); i = (i + 2)) {\r\n//     var eventDuration = (eventArray[(i + 1)] - eventArray[i]);\r\n//     durations.push(eventDuration);\r\n//   };\r\n//   if (durations.length === 0) {\r\n//     durations = 0;\r\n//   } else {\r\n//     durations = durations.reduce((total, num) => (total + num));\r\n//   }\r\n//   return durations\r\n// }\r\n\r\nfunction sumDurations (array, eventType) {\r\n  // adjust timeline for inconsistent time reporting\r\n  var adjustedTimeline =[];\r\n      //When i > i+1, set i+1 = i.\r\n      for ( var i = 0; i < array.length; i = i + 2 ) {\r\n          var num;\r\n          array[i] >= array[i+1] ? (num = i) : (num = i+1);\r\n          adjustedTimeline.push(array[i], array[num]);\r\n      }\r\n  // pick appropriate sets of event times to count duration of either task or distractions\r\n  var startIndex;\r\n  var durations = [];\r\n  eventType === \"tasks\" ? ( startIndex = 0 ) : ( startIndex = 1 );\r\n  for ( var i = startIndex; i < ( adjustedTimeline.length-1); i = (i + 2)) {\r\n      var eventDuration = (adjustedTimeline[(i+1)] - adjustedTimeline[i]);\r\n      durations.push(eventDuration);\r\n  };\r\n  if (durations.length === 0) {\r\n      durations = 0;\r\n  } else {\r\n  durations = durations.reduce((total, num) => (total + num));\r\n  }\r\n  return durations\r\n}\r\n\r\n\r\nconst TimerFace = (props) => {\r\n  const { timerName, distraction, paused } = props;\r\n  const [renderInterval, addASecond] = useState(0);\r\n\r\n\r\n  function formatTime(array) {\r\n    //calculate time elapsed since task started.\r\n    //if paused, display task duration and do not refresh\r\n    var timeElapsed;\r\n    if (distraction) {\r\n      timeElapsed = sumDurations(array, \"distractions\")\r\n    } else {\r\n      paused ?\r\n        (timeElapsed = array[array.length - 1] - array[0])\r\n        :\r\n        (timeElapsed = Date.now() - array[0])\r\n    };\r\n  \r\n    //format the time from Date.now() ms count into hh:mm:ss format\r\n    function formatDoubleDigits(value) {\r\n      if (value < 10) value = \"0\" + value;\r\n      return value;\r\n    };\r\n    const sec = 1000, min = (sec * 60), hour = (min * 60), day = (hour * 24);\r\n    var hoursPassed = Math.floor((timeElapsed % day) / hour);\r\n    var minutesPassed = formatDoubleDigits(Math.floor((timeElapsed % hour) / min));\r\n    var secondsPassed = formatDoubleDigits(Math.floor((timeElapsed % min) / sec));\r\n  \r\n    //return the time in hh:mm:ss format\r\n    return (\r\n      <p id=\"time\">\r\n        {hoursPassed}:{ minutesPassed}:{ secondsPassed}\r\n      </p>\r\n    )\r\n  }\r\n\r\n\r\n  // rerender this element every second\r\n  useEffect(() => {\r\n    const id = setInterval(() => {\r\n      addASecond(Date.now());\r\n    }, 1000);\r\n    return () => clearInterval(id);\r\n  }, [])\r\n\r\n\r\n  return (\r\n    <myContext.Consumer>\r\n      {context => (\r\n        <>\r\n          <h4>{ timerName }</h4>\r\n          <div className =\"timer-face\">\r\n            {formatTime( context.timedEvents )}\r\n          </div>\r\n        </>\r\n      )}\r\n    </myContext.Consumer>\r\n  )\r\n\r\n}\r\n\r\nexport default TimerFace\r\n","import React, { useState } from 'react'\r\nimport { ButtonGroup, Button, InputGroup } from \"@blueprintjs/core\";\r\nimport { myContext } from '../components/provider'\r\nimport { navigate } from \"gatsby\"\r\nimport SEO from \"../components/seo\"\r\nimport Layout from \"../components/layout\"\r\nimport TimerFace from \"../components/timerFace\"\r\n\r\n\r\nconst CustomTimePanel = (props) => {\r\n  var logDistraction = props.logDistraction;\r\n  var customDuration;\r\n  return(\r\n    <div id=\"nonhover\" className=\"bp3-button\" style={{ display: `flex`, flexDirection: `row`, width:`60%`}}>\r\n      <InputGroup id=\"text-input\" placeholder=\"Custom #\" style={{ width: `100px`}} />\r\n      <Button onClick={() => {customDuration = 60000*(document.getElementById(\"text-input\").value); logDistraction(customDuration)}} >Submit</Button>\r\n    </div>  \r\n  )\r\n}\r\n\r\nconst DistractedButtonPanel = (props) => {\r\n  const { logDistraction } = props;\r\n\r\n  return(\r\n    <div style={{ display: `flex`, flexDirection: `column`}}>\r\n      <h4>How many minutes were you distracted?</h4>\r\n      <ButtonGroup large>\r\n        <Button id=\"w20\" onClick={() => logDistraction(30000)} >30 sec</Button>\r\n        <Button id=\"w20\" onClick={() => logDistraction(60000)} >1</Button>\r\n        <Button id=\"w20\" onClick={() => logDistraction(180000)} >3</Button>\r\n        <Button id=\"w20\" onClick={() => logDistraction(300000)} >5</Button>\r\n        <Button id=\"w20\" onClick={() => logDistraction(600000)} >10</Button>\r\n      </ButtonGroup>\r\n      <ButtonGroup >\r\n        <Button id=\"w20\" onClick={() => logDistraction(1200000)}  large>20</Button>\r\n        <Button id=\"w20\" onClick={() => logDistraction(1800000)}  large>30</Button>\r\n        <CustomTimePanel logDistraction={logDistraction} />\r\n      </ButtonGroup>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TimePanel = ( props ) => {\r\n  const { toggleTimer } = props;\r\n  const [timerDisplayed, toggleTimerDisplayed] = useState(true);\r\n\r\n  return(\r\n    <div style={{marginLeft:`1.0875rem`}}>\r\n        { timerDisplayed ?\r\n          ( <TimerFace timerName={`Total Task Time`} />) \r\n          : \r\n          ( <>\r\n              <h4>Total Task Time</h4>\r\n              <div className =\"timer-face\">\r\n                <p>Hidden</p>\r\n              </div>\r\n            </> )\r\n        }\r\n      <br />\r\n\r\n      <Button id=\"w50\" \r\n        className=\"timerDisplayButton\" \r\n        text={ timerDisplayed ? (\"Hide Timer\") : (\"Show Timer\") } \r\n        large \r\n        style={{padding:0, textAlign:`center`}} \r\n        onClick = {() => toggleTimerDisplayed(!timerDisplayed)} \r\n      />\r\n      <Button id=\"w50\" \r\n        text=\"Stop\" \r\n        large \r\n        onClick={ () => { navigate(\"/report/\") }} \r\n        onClick={ () => { toggleTimer(); navigate(\"/report/\") }} \r\n      />\r\n      <br />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst TimerPage = () => {\r\n  return (\r\n    <myContext.Consumer>\r\n      {context => (\r\n        <Layout>\r\n          <h2>Task in Progress</h2>\r\n          <SEO title=\"Timer\" />\r\n          <div style={{ display: `flex`, }}>\r\n            <DistractedButtonPanel logDistraction = {context.logDistraction} />\r\n            {/* <DistractedButtonPanel logDistraction = {context.logDistraction} timedEvents = {context.timedEvents} /> */}\r\n            <TimePanel toggleTimer={context.toggleTimer}/>\r\n          </div>\r\n        </Layout>\r\n      )}\r\n    </myContext.Consumer>\r\n  )\r\n\r\n}\r\n\r\nexport default TimerPage"],"sourceRoot":""}